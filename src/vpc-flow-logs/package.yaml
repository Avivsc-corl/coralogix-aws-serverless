AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Lambda function to send VPC Flow Logs from S3 bucket to Coralogix
Metadata:
  AWS::ServerlessRepo::Application:
    Name: Coralogix-VPC-Flog-Logs-S3
    Description: Send logs from S3 bucket to Coralogix.
    Author: Coralogix
    SpdxLicenseId: Apache-2.0
    LicenseUrl: s3://telenor-dev/apps/f8131d3e88bc7ca8e19cc0af47bc3d18
    ReadmeUrl: s3://telenor-dev/apps/97e060afbf807697d66be6a9ad47cf8e
    Labels:
    - coralogix
    - logs
    - s3
    - vpc
    HomePageUrl: https://coralogix.com
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/coralogix/coralogix-aws-serverless
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Coralogix Configuration
      Parameters:
      - CoralogixRegion
      - PrivateKey
      - ApplicationName
      - SubsystemName
    - Label:
        default: Logging Configuration
      Parameters:
      - NewlinePattern
      - SamplingRate
      - BufferSize
      - Debug
    - Label:
        default: S3 Configuration
      Parameters:
      - S3BucketName
      - S3KeyPrefix
      - S3KeySuffix
    - Label:
        default: Lambda Configuration
      Parameters:
      - FunctionArchitecture
      - FunctionMemorySize
      - FunctionTimeout
      - NotificationEmail
    ParameterLabels:
      CoralogixRegion:
        default: Region
      PrivateKey:
        default: Private Key
      ApplicationName:
        default: Application Name
      SubsystemName:
        default: Subsystem Name
      NewlinePattern:
        default: Newline Pattern
      SamplingRate:
        default: Sampling Rate
      BufferSize:
        default: Buffer Size
      Debug:
        default: Debug Mode
      S3BucketName:
        default: Bucket Name
      S3KeyPrefix:
        default: Key Prefix
      S3KeySuffix:
        default: Key Suffix
      FunctionArchitecture:
        default: Architecture
      FunctionMemorySize:
        default: Memory
      FunctionTimeout:
        default: Timeout
      NotificationEmail:
        default: Notification Email
Parameters:
  CoralogixRegion:
    Type: String
    Description: The Coralogix location region [Europe, Europe2, India, Singapore,
      US]
    AllowedValues:
    - Europe
    - Europe2
    - India
    - Singapore
    - US
    Default: Europe
  PrivateKey:
    Type: String
    Description: The Coralogix private key which is used to validate your authenticity
    AllowedPattern: '[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}'
    ConstraintDescription: The PrivateKey should be valid UUID string
    MinLength: 36
    MaxLength: 36
    NoEcho: true
  ApplicationName:
    Type: String
    Description: The name of your application
    MinLength: 1
    MaxLength: 64
  SubsystemName:
    Type: String
    Description: The subsystem name of your application
    MinLength: 1
    MaxLength: 64
  NewlinePattern:
    Type: String
    Description: The pattern for lines splitting
    Default: (?:\r\n|\r|\n)
  BlockingPattern:
    Type: String
    Description: The pattern for lines blocking
    Default: ''
  SamplingRate:
    Type: Number
    Description: Send messages with specific rate
    MinValue: 1
    Default: 1
  BufferSize:
    Type: Number
    Description: Coralogix logger buffer size
    MinValue: 12582912
    Default: 134217728
  Debug:
    Type: String
    Description: Coralogix logger debug mode
    AllowedValues:
    - true
    - false
    Default: false
  S3BucketName:
    Type: String
    Description: The name of the S3 bucket to watch
    AllowedPattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
    MinLength: 3
    MaxLength: 63
  S3KeyPrefix:
    Type: String
    Description: The S3 path prefix to watch
    MaxLength: 1024
    Default: ''
  S3KeySuffix:
    Type: String
    Description: The S3 path suffix to watch
    MaxLength: 1024
    Default: ''
  FunctionArchitecture:
    Type: String
    Description: Lambda function architecture [x86_64, arm64]
    AllowedValues:
    - x86_64
    - arm64
    Default: x86_64
  FunctionMemorySize:
    Type: Number
    Description: Lambda function memory limit
    MinValue: 128
    MaxValue: 10240
    Default: 1024
  FunctionTimeout:
    Type: Number
    Description: Lambda function timeout limit
    MinValue: 30
    MaxValue: 900
    Default: 300
  NotificationEmail:
    Type: String
    Description: Failure notification email address
    MaxLength: 320
    Default: ''
Mappings:
  CoralogixRegionMap:
    Europe:
      LogUrl: https://api.coralogix.com/api/v1/logs
    Europe2:
      LogUrl: https://api.eu2.coralogix.com/api/v1/logs
    India:
      LogUrl: https://api.app.coralogix.in/api/v1/logs
    Singapore:
      LogUrl: https://api.coralogixsg.com/api/v1/logs
    US:
      LogUrl: https://api.coralogix.us/api/v1/logs
Conditions:
  IsNotificationEnabled:
    Fn::Not:
    - Fn::Equals:
      - Ref: NotificationEmail
      - ''
Resources:
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Send logs from S3 bucket to Coralogix.
      CodeUri: s3://telenor-dev/apps/c1341f2d6e01d0f7464b5a64221ca95a
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
      - Ref: FunctionArchitecture
      MemorySize:
        Ref: FunctionMemorySize
      Timeout:
        Ref: FunctionTimeout
      Environment:
        Variables:
          CORALOGIX_URL:
            Fn::FindInMap:
            - CoralogixRegionMap
            - Ref: CoralogixRegion
            - LogUrl
          CORALOGIX_BUFFER_SIZE:
            Ref: BufferSize
          private_key:
            Ref: PrivateKey
          app_name:
            Ref: ApplicationName
          sub_name:
            Ref: SubsystemName
          newline_pattern:
            Ref: NewlinePattern
          blocking_pattern:
            Ref: BlockingPattern
          sampling:
            Ref: SamplingRate
          debug:
            Ref: Debug
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SNS
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: S3BucketName
    Metadata:
      SamResourceId: LambdaFunction
  LambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - LambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Sub: arn:aws:s3:::${S3BucketName}
    Metadata:
      SamResourceId: LambdaFunctionInvokePermission
  LambdaTrigger:
    Type: Custom::LambdaTrigger
    DependsOn: LambdaFunctionInvokePermission
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CustomResourceLambdaTriggerFunction
        - Arn
      LambdaArn:
        Fn::GetAtt:
        - LambdaFunction
        - Arn
      Bucket:
        Ref: S3BucketName
      Prefix:
        Ref: S3KeyPrefix
      Suffix:
        Ref: S3KeySuffix
    Metadata:
      SamResourceId: LambdaTrigger
  LambdaFunctionNotificationSubscription:
    Type: AWS::SNS::Subscription
    Condition: IsNotificationEnabled
    Properties:
      Protocol: email
      Endpoint:
        Ref: NotificationEmail
      TopicArn:
        Ref: LambdaFunction.DestinationTopic
    Metadata:
      SamResourceId: LambdaFunctionNotificationSubscription
  CustomResourceLambdaTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 50
      Policies:
      - Statement:
        - Sid: S3NotificationPolicy
          Effect: Allow
          Action:
          - s3:GetBucketNotification
          - s3:PutBucketNotification
          Resource:
            Fn::Sub: arn:aws:s3:::${S3BucketName}
      InlineCode: "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport json\nimport\
        \ boto3\nimport cfnresponse\n\n\nprint(\"Loading function\")\ns3 = boto3.client('s3')\n\
        \n\ndef lambda_handler(event, context):\n    print(\"Received event:\", json.dumps(event,\
        \ indent=2))\n    bucket = event['ResourceProperties']['Bucket']\n    print(f\"\
        processing bucket {bucket}\")\n    try:\n        print(\"Request Type:\",\
        \ event['RequestType'])\n        BucketNotificationConfiguration = s3.get_bucket_notification_configuration(\n\
        \            Bucket=bucket\n        )\n        BucketNotificationConfiguration.pop('ResponseMetadata')\n\
        \        BucketNotificationConfiguration.setdefault('LambdaFunctionConfigurations',\
        \ [])\n\n        if event['RequestType'] in ['Update', 'Delete']:\n      \
        \      BucketNotificationConfiguration['LambdaFunctionConfigurations'] = list(\n\
        \                filter(\n                    lambda configuration: configuration.get('Id')\
        \ != event['PhysicalResourceId'],\n                    BucketNotificationConfiguration['LambdaFunctionConfigurations']\n\
        \                )\n            )\n\n        if event['RequestType'] in ['Create',\
        \ 'Update']:\n            BucketNotificationConfiguration['LambdaFunctionConfigurations'].append({\n\
        \                'Id': event.get('PhysicalResourceId', context.aws_request_id),\n\
        \                'LambdaFunctionArn': event['ResourceProperties']['LambdaArn'],\n\
        \                'Filter': {\n                    'Key': {\n             \
        \           'FilterRules': [\n                            {\n            \
        \                    'Name': 'prefix',\n                                'Value':\
        \ event['ResourceProperties'].get('Prefix', '')\n                        \
        \    },\n                            {\n                                'Name':\
        \ 'suffix',\n                                'Value': event['ResourceProperties'].get('Suffix',\
        \ '')\n                            },\n                        ]\n       \
        \             }\n                },\n                'Events': [\n       \
        \             's3:ObjectCreated:*'\n                ]\n            })\n\n\
        \        if len(BucketNotificationConfiguration['LambdaFunctionConfigurations'])\
        \ == 0:\n            BucketNotificationConfiguration.pop('LambdaFunctionConfigurations')\n\
        \n        s3.put_bucket_notification_configuration(\n            Bucket=bucket,\n\
        \            NotificationConfiguration=BucketNotificationConfiguration\n \
        \       )\n        responseStatus = cfnresponse.SUCCESS\n        print(event['RequestType'],\
        \ \"request completed....\")\n    except Exception as e:\n        print(\"\
        Failed to process:\", e)\n        responseStatus = cfnresponse.FAILED\n  \
        \  finally:\n        print(\"Sending response to custom resource\")\n    \
        \    cfnresponse.send(\n            event,\n            context,\n       \
        \     responseStatus,\n            {},\n            event.get('PhysicalResourceId',\
        \ context.aws_request_id)\n        )\n"
    Metadata:
      SamResourceId: CustomResourceLambdaTriggerFunction
